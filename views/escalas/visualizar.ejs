<!DOCTYPE html>
<html>

<head>
  <title>Detalhes da Escala</title>

  <script>
    let colunaAtual = -1;
    let ordemAscendente = true;

    function ordenarTabela(coluna) {
      const tabela = document.getElementById("tabelaMedicos");
      const linhas = Array.from(tabela.getElementsByTagName("tr")).slice(1); // Ignora a primeira linha (cabeçalho)
      const ordem = coluna === colunaAtual ? !ordemAscendente : true;

      linhas.sort((a, b) => {
        const valorA = a.getElementsByTagName("td")[coluna].innerText.trim();
        const valorB = b.getElementsByTagName("td")[coluna].innerText.trim();

        if (coluna === 1) {
          const dataA = new Date(valorA);
          const dataB = new Date(valorB);
          return (dataA - dataB) * (ordem ? 1 : -1);
        } else if (coluna === 2) {
          const mapeamentoTurno = {
            'Dia': 1,
            'Noite': 2,
            'DiaHospB': 3
          };
          const turnoA = mapeamentoTurno[valorA.trim()];
          const turnoB = mapeamentoTurno[valorB.trim()];
          return turnoA - turnoB || valorA.localeCompare(valorB) * (ordem ? 1 : -1);
        } else {
          return isNaN(valorA) ? valorA.localeCompare(valorB) * (ordem ? 1 : -1) : (valorA - valorB) * (ordem ? 1 : -1);
        }
      });

      // Remova as linhas existentes da tabela
      linhas.forEach(linha => tabela.tBodies[0].appendChild(linha));

      // Atualiza a coluna e a ordem atual
      colunaAtual = coluna;
      ordemAscendente = ordem;

      // Atualiza as setas de ordenação
      atualizarSetasOrdenacao(coluna, ordem);
    }

    function atualizarSetasOrdenacao(coluna, ordem) {
      const ths = document.querySelectorAll('#tabelaMedicos th');
      ths.forEach((th, index) => {
        th.innerHTML = th.innerHTML.replace(/▲| ▼/, ''); // Remove setas antigas
        if (index === coluna) {
          const seta = ordem ? '▲ ' : '▼ ';
          th.innerHTML += seta;
        }
      });
    }

    // Adiciona as setas de ordenação no carregamento da página
    window.addEventListener('DOMContentLoaded', () => {
      const tabela = document.getElementById("tabelaMedicos");
      const colunaInicial = 0; // Coluna inicial para a seta
      const ordemInicial = tabela.getAttribute("data-ordem") === "asc" ? 1 : -1;
      atualizarSetasOrdenacao(colunaInicial, ordemInicial);
    });
  </script>
</head>

<body class="bodyScale">
  <div class="escalaDetalhes">
    <h1>Detalhes da Escala</h1>
    <p>Data de Início: <%= escala.dataInicio.toDateString() %></p>
    <p>Data de Fim: <%= escala.dataFim.toDateString() %></p>
  </div>

  <div>
    <table id="tabelaMedicos" data-ordem="asc">
      <tr>
        <th class="nomeTittle" onclick="ordenarTabela(0)">Nome do Médico</th>
        <th class="nomeTittle" onclick="ordenarTabela(1)">Data</th>
        <th class="nomeTittle" onclick="ordenarTabela(2)">Turno</th>
      </tr>
      <% const coresMedicos = {}; %>
      <% escala.medicos.forEach((medico) => { %>
      <% const medicoNome = medico.nomeMedico; %>
      <% const cor = coresMedicos[medicoNome] || getRandomColor(); %>
      <% coresMedicos[medicoNome] = cor; %>
      <tr style="background-color: <%= cor %>;">
        <td class="nomeTittle"><%= medicoNome %></td>
        <td class="nomeTittle"><%= medico.dia.toISOString().split('T')[0] %></td>
        <td class="nomeTittle"><%= medico.turno %></td>
      </tr>
      <% }); %>
    </table>
  </div>
  <div class="downloadPdf">
    <a href="#" id="downloadPdfBtn">Download PDF</a>
  </div>
  <div class="btnsEscala">
    <div class="excluirEscala">
      <form action="/escala/<%= escala._id %>/delete" method="get">
        <button type="submit">Excluir Escala</button>
      </form>
    </div>
    <div class="voltar">
      <a href="/escala">Voltar para a lista de escalas</a>
    </div>
  </div>
  <% function getRandomColor() { return 'rgba(' + Math.floor(Math.random() * 256) + ',' + Math.floor(Math.random() * 256) + ',' + Math.floor(Math.random() * 256) + ', 0.5)'; } %>

</body>

<script>
  const escalaId = "<%= escala._id %>"
  document.getElementById('downloadPdfBtn').addEventListener('click', () => {
    fetch(`/escala/${escalaId}/pdf`)
      .then(response => response.blob())
      .then(blob => {
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = 'escala.pdf';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      })
      .catch(error => console.error('Erro ao baixar o PDF', error));
  });
</script>

</html>